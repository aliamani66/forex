//@version=5
strategy("Simple Algo v3 PRO Strategy", overlay=true, initial_capital=100, default_qty_type=strategy.cash, default_qty_value=100)

// Stop Loss Type Selection
stopType = input.string("ATR", "Stop Loss Type", options=["ATR", "Fixed Percent", "Indicator"], group="Stop Loss Settings")
fixedStopPercent = input.float(1.0, "Fixed Stop Loss %", minval=0.1, maxval=100.0, step=0.1, group="Stop Loss Settings")
atrLen = input.int(14, "ATR Length", minval=1, group="Stop Loss Settings")
atrRisk = input.float(1.0, "ATR Multiplier", minval=0.1, step=0.1, group="Stop Loss Settings")

// Exit Strategy Selection
exitStrategy = input.string("Both", "Exit Strategy", options=["TPs Only", "Next Signal Only", "Both"], group="Exit Strategy")

// Risk Management Inputs
riskPerTrade = input.float(2.0, "Risk Per Trade (%)", minval=0.1, maxval=100.0, step=0.1, group="Risk Management")
useTP1 = input.bool(true, "Use TP 1:1", group="Take Profit Management")
useTP2 = input.bool(true, "Use TP 2:1", group="Take Profit Management")
useTP3 = input.bool(true, "Use TP 3:1 (Closes on opposite signal)", group="Take Profit Management")
tp1Percent = input.float(40.0, "TP1 Position Close (%)", minval=1, maxval=100, group="Take Profit Management")
tp2Percent = input.float(40.0, "TP2 Position Close (%)", minval=1, maxval=100, group="Take Profit Management")
tp3Percent = input.float(20.0, "TP3 Position Close (%)", minval=1, maxval=100, group="Take Profit Management")

// Original Indicator Parameters
nbuysell = input.bool(true, "Buy/Sell Signal", group="Strategy Parameters")
nsensitivity = input.float(2, "Sensitivity", minval=1, maxval=20, group="Strategy Parameters")

// Variables for trade tracking
var float initial_balance = strategy.initial_capital
var int total_trades = 0
var int winning_trades = 0
var int losing_trades = 0
var float largest_win = 0.0
var float largest_loss = 0.0
var float prev_balance = initial_balance
var float max_drawdown = 0.0
var float peak_balance = initial_balance
var float current_trade_profit = 0.0

// Variables for current trade
var float entry_price = na
var float trade_start_balance = na

// Variables for price levels
var float lastTP1 = na
var float lastTP2 = na
var float lastTP3 = na
var float lastStop = na

// Variables for TP tracking
var bool tp1Reached = false
var bool tp2Reached = false
var bool tp3Reached = false

// Additional tracking variables
var float tp1_profit = 0.0
var float tp2_profit = 0.0
var float tp3_profit = 0.0
var int tp1_count = 0
var int tp2_count = 0
var int tp3_count = 0

// Supertrend Function
supertrend(_close, factor, atrLen) =>
    atr = ta.atr(atrLen)
    upperBand = _close + factor * atr
    lowerBand = _close - factor * atr
    prevLowerBand = nz(lowerBand[1])
    prevUpperBand = nz(upperBand[1])
    lowerBand := lowerBand > prevLowerBand or close[1] < prevLowerBand ? lowerBand : prevLowerBand
    upperBand := upperBand < prevUpperBand or close[1] > prevUpperBand ? upperBand : prevUpperBand
    int direction = na
    float superTrend = na
    prevSuperTrend = superTrend[1]
    if na(atr[1])
        direction := 1
    else if prevSuperTrend == prevUpperBand
        direction := close > upperBand ? -1 : 1
    else
        direction := close < lowerBand ? 1 : -1
    superTrend := direction == -1 ? lowerBand : upperBand
    [superTrend, direction]

// Calculate Components
sma4 = ta.sma(close, 8)
sma5 = ta.sma(close, 9)
sma9 = ta.sma(close, 13)
[supertrend, direction] = supertrend(close, nsensitivity*2, 11)

// Calculate Signals
bull = ta.crossover(close, supertrend) and close >= sma9 and nbuysell
bear = ta.crossunder(close, supertrend) and close <= sma9 and nbuysell

// Calculate Stop Loss based on selected type
calculateStopLoss(isLong) =>
    float stopLevel = na
    if stopType == "ATR"
        atrValue = ta.atr(atrLen) * atrRisk
        stopLevel := isLong ? low - atrValue : high + atrValue
    else if stopType == "Fixed Percent"
        stopLevel := isLong ? close * (1 - fixedStopPercent/100) : close * (1 + fixedStopPercent/100)
    else // Indicator
        stopLevel := isLong ? supertrend : supertrend
    stopLevel

// Position Size Calculation
calcPositionSize(entryPrice, stopPrice) =>
    riskAmount = strategy.equity * (riskPerTrade / 100)
    positionSize = riskAmount / math.abs(entryPrice - stopPrice)
    positionSize

// Track TP hits
trackTPHit(price, lastPrice, isLong) =>
    if isLong
        high >= lastPrice
    else
        low <= lastPrice

// Reset values and calculate levels on new position
if bull or bear
    entry_price := close
    trade_start_balance := strategy.equity
    tp1Reached := false
    tp2Reached := false
    tp3Reached := false
    
    lastStop := calculateStopLoss(bull)
    if bull
        lastTP1 := close + (close - lastStop)
        lastTP2 := close + (close - lastStop) * 2
        lastTP3 := close + (close - lastStop) * 3
    else
        lastTP1 := close - (lastStop - close)
        lastTP2 := close - (lastStop - close) * 2
        lastTP3 := close - (lastStop - close) * 3

// Entry Rules
if bull
    posSize = calcPositionSize(close, lastStop)
    strategy.entry("Long", strategy.long, qty=posSize)

if bear
    posSize = calcPositionSize(close, lastStop)
    strategy.entry("Short", strategy.short, qty=posSize)

// Check TP hits
if strategy.position_size > 0
    if high >= lastTP1 and not tp1Reached
        tp1Reached := true
    if high >= lastTP2 and not tp2Reached and tp1Reached
        tp2Reached := true
    if high >= lastTP3 and not tp3Reached and tp2Reached
        tp3Reached := true
else if strategy.position_size < 0
    if low <= lastTP1 and not tp1Reached
        tp1Reached := true
    if low <= lastTP2 and not tp2Reached and tp1Reached
        tp2Reached := true
    if low <= lastTP3 and not tp3Reached and tp2Reached
        tp3Reached := true

// Take Profit Management
if strategy.position_size > 0
    tp1Size = math.abs(strategy.position_size * (tp1Percent / 100))
    tp2Size = math.abs(strategy.position_size * (tp2Percent / 100))
    tp3Size = math.abs(strategy.position_size * (tp3Percent / 100))
    
    if useTP1
        strategy.exit("Long TP1", "Long", qty=tp1Size, limit=lastTP1, stop=lastStop, comment="TP1 " + str.tostring(tp1Percent) + "%")
    if useTP2 and tp1Reached
        strategy.exit("Long TP2", "Long", qty=tp2Size, limit=lastTP2, stop=lastStop, comment="TP2 " + str.tostring(tp2Percent) + "%")
    if useTP3 and tp2Reached and bear  // Only close TP3 on opposite signal
        strategy.close("Long", qty=tp3Size, comment="TP3 " + str.tostring(tp3Percent) + "% on Signal")

if strategy.position_size < 0
    tp1Size = math.abs(strategy.position_size * (tp1Percent / 100))
    tp2Size = math.abs(strategy.position_size * (tp2Percent / 100))
    tp3Size = math.abs(strategy.position_size * (tp3Percent / 100))
    
    if useTP1
        strategy.exit("Short TP1", "Short", qty=tp1Size, limit=lastTP1, stop=lastStop, comment="TP1 " + str.tostring(tp1Percent) + "%")
    if useTP2 and tp1Reached
        strategy.exit("Short TP2", "Short", qty=tp2Size, limit=lastTP2, stop=lastStop, comment="TP2 " + str.tostring(tp2Percent) + "%")
    if useTP3 and tp2Reached and bull  // Only close TP3 on opposite signal
        strategy.close("Short", qty=tp3Size, comment="TP3 " + str.tostring(tp3Percent) + "% on Signal")

// Exit on next signal if enabled (only for non-TP3 portion)
if (exitStrategy != "TPs Only")
    if bull and strategy.position_size < 0 and not tp2Reached
        strategy.close("Short", comment="Exit on Buy Signal")
    if bear and strategy.position_size > 0 and not tp2Reached
        strategy.close("Long", comment="Exit on Sell Signal")

// Update stats when position is closed
if strategy.position_size == 0 and strategy.position_size[1] != 0
    current_trade_profit := strategy.equity - prev_balance
    trade_profit_percent = (current_trade_profit / prev_balance) * 100
    
    if current_trade_profit > 0
        winning_trades := winning_trades + 1
        largest_win := math.max(largest_win, trade_profit_percent)
    else
        losing_trades := losing_trades + 1
        largest_loss := math.min(largest_loss, trade_profit_percent)
    
    total_trades := total_trades + 1
    peak_balance := math.max(peak_balance, strategy.equity)
    drawdown = ((peak_balance - strategy.equity) / peak_balance) * 100
    max_drawdown := math.max(max_drawdown, drawdown)
    prev_balance := strategy.equity

// Track TP profits
if strategy.closedtrades > 0
    last_trade = strategy.closedtrades - 1
    exit_comment = strategy.closedtrades.exit_comment(last_trade)
    exit_price = strategy.closedtrades.exit_price(last_trade)
    entry_price_val = strategy.closedtrades.entry_price(last_trade)
    trade_size = strategy.closedtrades.size(last_trade)
    trade_profit = (exit_price - entry_price_val) * trade_size
    
    if str.contains(exit_comment, "TP1")
        tp1_profit := tp1_profit + trade_profit
        tp1_count := tp1_count + 1
    else if str.contains(exit_comment, "TP2")
        tp2_profit := tp2_profit + trade_profit
        tp2_count := tp2_count + 1
    else if str.contains(exit_comment, "TP3")
        tp3_profit := tp3_profit + trade_profit
        tp3_count := tp3_count + 1

// Statistics Table
var table stats = table.new(position.middle_right, 2, 12, border_width=1)
if barstate.islast
    win_rate = total_trades > 0 ? (winning_trades / total_trades) * 100 : 0
    profit_factor = losing_trades > 0 ? math.abs(largest_win / largest_loss) : 0
    total_profit_percent = ((strategy.equity - initial_balance) / initial_balance) * 100
    
    // Column Headers
    table.cell(stats, 0, 0, "Metric", bgcolor=color.new(color.blue, 90), text_color=color.white)
    table.cell(stats, 1, 0, "Value", bgcolor=color.new(color.blue, 90), text_color=color.white)
    
    // Basic Metrics
    table.cell(stats, 0, 1, "Total Trades", bgcolor=color.new(color.blue, 90), text_color=color.white)
    table.cell(stats, 1, 1, str.tostring(total_trades), text_color=color.white)
    
    table.cell(stats, 0, 2, "Winning Trades", bgcolor=color.new(color.blue, 90), text_color=color.white)
    table.cell(stats, 1, 2, str.tostring(winning_trades), text_color=color.white)
    
    table.cell(stats, 0, 3, "Losing Trades", bgcolor=color.new(color.blue, 90), text_color=color.white)
    table.cell(stats, 1, 3, str.tostring(losing_trades), text_color=color.white)
    
    table.cell(stats, 0, 4, "Win Rate %", bgcolor=color.new(color.blue, 90), text_color=color.white)
    table.cell(stats, 1, 4, str.tostring(win_rate, "#.##") + "%", text_color=color.white)
    
    table.cell(stats, 0, 5, "Total Profit %", bgcolor=color.new(color.blue, 90), text_color=color.white)
    table.cell(stats, 1, 5, str.tostring(total_profit_percent, "#.##") + "%", text_color=color.white)
    
    table.cell(stats, 0, 6, "Profit Factor", bgcolor=color.new(color.blue, 90), text_color=color.white)
    table.cell(stats, 1, 6, str.tostring(profit_factor, "#.##"), text_color=color.white)
    
    table.cell(stats, 0, 7, "Max Drawdown %", bgcolor=color.new(color.blue, 90), text_color=color.white)
    table.cell(stats, 1, 7, str.tostring(max_drawdown, "#.##") + "%", text_color=color.white)
    
    table.cell(stats, 0, 8, "
    table.cell(stats, 0, 8, "Account Value", bgcolor=color.new(color.blue, 90), text_color=color.white)
    table.cell(stats, 1, 8, str.tostring(strategy.equity, "#.##"), text_color=color.white)

// Plot Entry Signals
plotshape(bull, title="Buy Signal", text="Buy", style=shape.labelup, location=location.belowbar, color=color.rgb(128, 255, 0), textcolor=color.white, size=size.small)
plotshape(bear, title="Sell Signal", text="Sell", style=shape.labeldown, location=location.abovebar, color=color.rgb(254, 1, 0), textcolor=color.white, size=size.small)

// Plot profit/loss labels
if strategy.position_size[1] != 0 and strategy.position_size == 0
    label_text = str.tostring(math.round((strategy.equity - prev_balance) / prev_balance * 100, 2))
    if bull[1]
        label.new(bar_index[1], low[1], label_text + "%", style=label.style_none, 
                 color=strategy.equity > prev_balance ? color.green : color.red, 
                 textcolor=color.white, size=size.small)
    if bear[1]
        label.new(bar_index[1], high[1], label_text + "%", style=label.style_none, 
                 color=strategy.equity > prev_balance ? color.green : color.red, 
                 textcolor=color.white, size=size.small)

// Plot levels
plot(strategy.position_size != 0 ? lastTP1 : na, "TP1", color=color.green, style=plot.style_circles)
plot(strategy.position_size != 0 ? lastTP2 : na, "TP2", color=color.green, style=plot.style_circles)
plot(strategy.position_size != 0 ? lastTP3 : na, "TP3", color=color.green, style=plot.style_circles)
plot(strategy.position_size != 0 ? lastStop : na, "Stop", color=color.red, style=plot.style_circles)